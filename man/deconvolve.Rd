% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deconvolve.R
\name{deconvolve}
\alias{deconvolve}
\title{Deconvolution of tumor samples}
\usage{
deconvolve(Y, X, purity = 1, groups = NULL, intercept = TRUE, ...,
  BPPARAM = BiocParallel::bpparam())
}
\arguments{
\item{Y}{a matrix of log gene expression to deconvolute. Genes in row,
samples in columns.}

\item{X}{a matrix with the cell type gene signatures (log expression) to be
used for deconvolution. Genes in row and cell types in columns.}

\item{purity}{numeric vector of length the number of samples in Y. It
specifies the purity of each sample.}

\item{groups}{vector specifying the groups of cell types
(a la group lasso).}

\item{intercept}{logical. Whether an intercept should be added to X.}

\item{...}{additional parameters to be passed to or \code{\link[lsgl]{fit}}.
See its man pages for details.}

\item{BPPARAM}{object of class \code{bpparamClass} that specifies the
back-end to be used for computations. See
\code{\link[BiocParallel]{bpparam}} for details.}
}
\value{
A list with two components: the estimated proportion of cell types
  with and without standardization to sum to one.
}
\description{
Given a matrix of tumor samples and a matrix of cell type gene signatures,
this function returns a vector of cell type composition.
}
\details{
Optionally, the results can be standardize to sum to one, to give
  the proportion of (non-tumor) cell types in each sample. However, often the
  unstandardized coefficients are more informative as they are inversely
  related to the tumor purity of each sample.

The method is based on the sparse group lasso (SGL) as implemented
  in the lsgl package (negative coefficients are forced to 0).

Note that both X and Y need to have rownames. The common rownames
  will be used as the genes used for the deconvolution.

The deconvolution uses the purity of the samples as prior
  information to penalize the coefficients (the more purity the more likely
  the coefficients to be zero).
}
\examples{

X <- matrix(rnorm(30), ncol=3, nrow=10)
Y <- matrix(ncol=2, nrow=10)
Y[,1] <- 10 + 2 * X[,2] + rnorm(10, sd=.2)
Y[,2] <- X[,1] + 3 * X[,3] + rnorm(10, sd=.2)
rownames(X) <- rownames(Y) <- paste0("gene", 1:10)
colnames(Y) <- paste0("sample", 1:2)
colnames(X) <- paste0("celltype", 1:3)
res <- deconvolve(Y, X, purity = 0.5,
                  BPPARAM = BiocParallel::SerialParam())

}
\author{
Davide Risso
}
